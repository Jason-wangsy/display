一、npm i webpack webpack-cli -g  全局安装webpack webpack-cli

二、npm i webpack webpack-cli -D 项目内安装webpack webpack-cli

三、npm i html-webpack-plugin -D 项目内安装，在内存中生成html模板页面，并自动引入css和js

四、npm i url-loader style-loader sass-loader node-sass file-loader css-loader -D 解析各种文件

五、npm i webpack-dev-server -D 自动打包

六、npm i clean-webpack-plugin -D 删除dist文件夹

七、npm i babel-loader @babel/core @babel/preset-env -D
    npm i @babel/runtime @babel/plugin-transform-runtime -D
    npm i @babel/plugin-proposal-class-properties -D
    解析es6语法

八、配置开发时的webpack.config.js:

  	webpack.config.js中:
        const path = require('path');
        const HtmlWebpackPlugin = require('html-webpack-plugin');
        module.exports = {
            entry: './src/index.js',
            output: {
                filename: 'bundle.js',
                path: path.resolve(__dirname, 'dist')
            },
            mode: 'development',
            plugins: [
                new HtmlWebpackPlugin({
                    template: path.join(__dirname, './src/index.html'),
                    filename: 'index.html'
                })
            ],
            module: {
                rules: [{
                        test: /\.css$/,
                        use: ["style-loader", "css-loader"]
                    },
                    {
                        test: /\.scss$/,
                        use: ['style-loader', 'css-loader', 'sass-loader']
                    },
                    {
                        test: /\.(jpg|png|gif|bmp|jpeg)$/,
                        use: "url-loader?limit=5000"
                    },
                    {
                        test: /\.(ttf|eot|svg|woff|woff2)$/,
                        use: "url-loader"
                    },
                    {
                        test: /\.js$/,
                        exclude: /(node_modules|bower_components)/,
                        use: {
                            loader: "babel-loader"
                        }
                    }
                ]
            }
        }

九、配置开发完成时打包的webpack.pub.config.js(开发阶段不使用):

    const path = require('path');
    const HtmlWebpackPlugin = require('html-webpack-plugin');
    //导入删除dist文件夹的插件
    const cleanWebpackPlugin = require('clean-webpack-plugin')
    const webpack = require('webpack')
    //导入抽取css的插件
    const ExtractTextPlugin = require('extract-text-webpack-plugin');
    //导入压缩css的插件
    const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')
    module.exports = {
        entry: {
            app: './src/index.js'
        },
        output: {
            filename: 'js/bundle.js',
            path: path.resolve(__dirname, 'dist')
        },
        mode: 'production',
        plugins: [
            new webpack.HotModuleReplacementPlugin(),
            new HtmlWebpackPlugin({
                template: path.join(__dirname, './src/index.html'),
                filename: 'index.html',
                minify:{
                    collapseWhitespace: true,
                    removeComments:true,
                    removeAttributeQuotes: true
                }
            }),
            new cleanWebpackPlugin(),
            new ExtractTextPlugin("css/index.css"),
            new OptimizeCssAssetsPlugin()
        ],
        optimization: {
            splitChunks: {
            chunks: 'async',
            minSize: 3000,
            minChunks: 1,
            maxAsyncRequests: 5,
            maxInitialRequests: 3,
            automaticNameDelimiter: '~',
            name: true,
            cacheGroups: {
                vendors: {
                test: /[\\/]node_modules[\\/]/,
                priority: -10
                },
                default: {
                minChunks: 2,
                priority: -20,
                reuseExistingChunk: true
                }
            }
            }
        },
        module: {
            rules: [{
                    test: /\.css$/,
                    use: ExtractTextPlugin.extract({
                        fallback: "style-loader",
                        use: "css-loader",
                        publicPath: '../'
                    })
                },
                {
                    test: /\.scss$/,
                    use: ExtractTextPlugin.extract({
                        fallback: 'style-loader',
                        use: ['css-loader', 'sass-loader'],
                        publicPath: '../'
                    })
                },
                {
                    test: /\.(jpg|png|gif|bmp|jpeg)$/,
                    use: "url-loader?limit=5000&name=images/[hash:8]-[name].[ext]"
                },
                {
                    test: /\.(ttf|eot|svg|woff|woff2)$/,
                    use: "url-loader"
                },
                {
                    test: /\.js$/,
                    exclude: /(node_modules|bower_components)/,
                    use: {
                        loader: "babel-loader"
                    }
                }
            ]
        }
    }